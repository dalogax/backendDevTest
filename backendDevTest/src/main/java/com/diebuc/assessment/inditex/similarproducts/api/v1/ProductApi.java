/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.diebuc.assessment.inditex.similarproducts.api.v1;

import com.diebuc.assessment.inditex.similarproducts.dto.ProductDetailDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-16T12:16:40.492706300+02:00[Europe/Madrid]")
@Validated
@Tag(name = "Product", description = "the Default API")
public interface ProductApi {

    /**
     * GET /product/{productId}/similar : Similar products
     *
     * @param productId  (required)
     * @return OK (status code 200)
     *         or Product Not found (status code 404)
     */
    @Operation(
        operationId = "getProductSimilar",
        summary = "Similar products",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ProductDetailDTO.class))),
            @ApiResponse(responseCode = "404", description = "Product Not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{productId}/similar",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<ProductDetailDTO>>> _getProductSimilar(
        @Parameter(name = "productId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("productId") String productId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getProductSimilar(productId, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Flux<ProductDetailDTO>>> getProductSimilar(String productId,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\", \"availability\" : true }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
